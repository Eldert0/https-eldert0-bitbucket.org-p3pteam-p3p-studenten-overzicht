@using WebMatrix.WebData

@{
    WebSecurity.RequireAuthenticatedUser();

    Layout = "~/_MainLayout.cshtml";
    Page.Title = "Manage Account";
    int curUserId = WebSecurity.CurrentUserId;
    var action = Request.Form["action"];

    bool hasLocalAccount = OAuthWebSecurity.HasLocalAccount(WebSecurity.CurrentUserId);

    string successMessage = "";
    var message = Request.QueryString["message"];
    if (message == "ChangedPassword") {
        successMessage = "Your password has been changed.";
    } else if (message == "SetPassword") {
        successMessage = "Your password has been set.";
    } else if (message == "RemovedLogin") {
        successMessage = "The external login was removed.";
    }

    var externalLogins =
        (from account in OAuthWebSecurity.GetAccountsFromUserName(WebSecurity.CurrentUserName)
         let clientData = OAuthWebSecurity.GetOAuthClientData(account.Provider)
         select new { Provider = account.Provider, ProviderDisplayName = clientData.DisplayName, UserId = account.ProviderUserId })
        .ToList();
    bool canRemoveLogin = externalLogins.Count > 1 || hasLocalAccount;

    // Get / edit user data
    int userExist = 0;
    var id = "";
 
       // Setup validation
    Validation.Add("voornaam", 
       Validator.Required("Veld mag niet leeg zijn"), 
       Validator.StringLength(20, 2, "Voornaam moet langer zijn dan 2 karakters"));

    Validation.Add("achternaam", 
       Validator.Required("Veld mag niet leeg zijn"), 
       Validator.StringLength(20, 2, "Niet meer dan 20 karakters"));

    Validation.Add("geslacht", 
       Validator.Required("Veld mag niet leeg zijn"));

    Validation.Add("telefoonnummer", 
       Validator.Required("Veld mag niet leeg zijn"), 
       Validator.StringLength(20, 0,"Niet meer dan 20 karakters"));
        
    Validation.Add("email", 
       Validator.Required("Veld mag niet leeg zijn"),
       Validator.Regex(@"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$","Foutief Email-adres")); 
        

    //userdata variables
    var voornaam = "";
    var achternaam = "";
    var telefoonnummer = "";
    dynamic geslacht = 0;
    var email = "";
    dynamic rolophalen = null;
    var roloud = "";
    var db = Database.Open("database");
    var rol = "";
  
 
     if (curUserId > 0)
     {  
        db = Database.Open("database");
 
        var Query = "SELECT count(*) FROM UserProfile WHERE UserId = @0";
        userExist = db.QueryValue(Query,curUserId);
        
         if(userExist == 1)
         {
            var DataQuery = "SELECT * FROM UserProfile WHERE UserId = @0";
            var userData = db.QuerySingle(DataQuery,curUserId);
            
            voornaam = userData.voornaam;
            achternaam = userData.achternaam;
            telefoonnummer = userData.telefoonnummer;
            geslacht = userData.geslacht;
            email = userData.email;        
         } 
         
         else 
         {
           Response.Redirect("~/Account/Manage");
         }   
     }

     else
     {
      Response.Redirect("~/Account/Manage");
     }

     if(IsPost)
      {  
        if (action == "changeUserData") {
             //opvragen van informatie
          
             voornaam = Request.Form["voornaam"];
             achternaam = Request.Form["achternaam"];
             telefoonnummer = Request.Form["telefoonnummer"];
             geslacht = Request.Form["geslacht"];
             email = Request.Form["email"];

             // If all information is valid, create a new account
             if(Validation.IsValid())
             {
                var updateCommand = "UPDATE UserProfile SET voornaam=@0, achternaam=@1, geslacht=@2, telefoonnummer=@3, email=@4 WHERE UserId=@5";
                db.Execute(updateCommand, voornaam, achternaam, geslacht, telefoonnummer, email, curUserId);

                Response.Redirect("~/Account/Manage");
             } 
             else 
             {
                
                ModelState.AddFormError("Email address is already in use.");
             }
         }
       }

    // Setup validation
    if (hasLocalAccount) {
        Validation.RequireField("currentPassword", "The current password field is required.");
        Validation.Add("currentPassword",
            Validator.StringLength(
                maxLength: Int32.MaxValue,
                minLength: 6,
                errorMessage: "Current password must be at least 6 characters"));
    }
    Validation.RequireField("newPassword", "The new password field is required.");
    Validation.Add("confirmPassword",
        Validator.Required("The confirm new password field is required."),
        Validator.EqualsTo("newPassword", "The new password and confirmation password do not match."));
    Validation.Add("newPassword",
        Validator.StringLength(
            maxLength: Int32.MaxValue,
            minLength: 6,
            errorMessage: "New password must be at least 6 characters"));

    if (IsPost) {
        AntiForgery.Validate();
        if (action == "password") {
            // Handle local account password operations
            var currentPassword = Request.Form["currentPassword"];
            var newPassword = Request.Form["newPassword"];
            var confirmPassword = Request.Form["confirmPassword"];

            if (Validation.IsValid()) {
                if (hasLocalAccount) {
                    if (WebSecurity.ChangePassword(WebSecurity.CurrentUserName, currentPassword, newPassword)) {
                        Response.Redirect("~/Account/Manage?message=ChangedPassword");
                        return;
                    } else {
                        ModelState.AddFormError("An error occurred when attempting to change the password. Please contact the site owner.");
                    }
                } else {
                    bool requireEmailConfirmation = !WebMail.SmtpServer.IsEmpty();
                    try {
                        WebSecurity.CreateAccount(WebSecurity.CurrentUserName, newPassword, requireEmailConfirmation);
                        Response.Redirect("~/Account/Manage?message=SetPassword");
                        return;
                    } catch (System.Web.Security.MembershipCreateUserException e) {
                        ModelState.AddFormError(e.Message);
                    }
                }
            } else {
                ModelState.AddFormError("Password change was unsuccessful. Please correct the errors and try again.");
            }
        } else if (action == "removeLogin") {
            // Remove external login
            var provider = Request.Form["provider"];
            var userId = Request.Form["userId"];

            message = null;
            var ownerAccount = OAuthWebSecurity.GetUserName(provider, userId);
            // Only remove the external login if it is owned by the currently logged in user and it is not the users last login credential
            if (ownerAccount == WebSecurity.CurrentUserName && canRemoveLogin) {
                OAuthWebSecurity.DeleteAccount(provider, userId);
                message = "RemovedLogin";
            }
            Response.Redirect(Href("~/Account/Manage", new { message }));
            return;
        } else {
            // Assume this an external login request
            string provider = Request.Form["provider"];
            if (!provider.IsEmpty()) {
                OAuthWebSecurity.RequestAuthentication(provider, Href("~/Account/RegisterService", new { returnUrl = Href("~/Account/Manage") }));
                return;
            }
        }
    }
}
<hgroup class="title">
    <h1>@Page.Title.</h1>
</hgroup>

@if (!successMessage.IsEmpty()) {
    <p class="message-success">
        @successMessage
    </p>
}

<p>You're logged in as <strong>@WebSecurity.CurrentUserName</strong>.</p>

<fieldset>
<legend>
    <text>Mijn gegevens</text>
</legend>
</fieldset>
  <div id="customForm">
    <div class="row">
 <form id="AddUserForm" method="POST" action="">

                <div class="form-group"> 
                <label for="achternaam">Voornaam</label>
                <input type="text" name="voornaam" class="form-control" id="IdVoornaam" placeholder="Voer voornaam in" value="@voornaam" @Validation.For("voornaam")>
                <noscript>@Html.ValidationMessage("voornaam")</noscript>
                </div>

                <div class="form-group"> 
                <label for="achternaam">Achternaam</label>
                <input type="text" name="achternaam" class="form-control" id="IdAchternaam" placeholder="Voer achternaam in" value="@achternaam" @Validation.For("achternaam")>
                <noscript>@Html.ValidationMessage("achternaam")</noscript>
                </div>
                 
             
                <div class="form-group">    
                <label for="geslacht">Geslacht</label>
                <select name="geslacht" class="form-control">
                    
                     @if(geslacht.ToString() == "1")
                     {
                        <option value="1" selected="selected">Man</option>
                        <option value="2">vrouw</option>
                     }
                     else
                     {
                         <option value="1">Man</option>
                         <option value="2" selected="selected">vrouw</option>
                     }
           
                </select>
                <noscript>@Html.ValidationMessage("geslacht")</noscript>
                </div>
                
                <div class="form-group"> 
                <label for="telefoonnummer">Telefoonnummer</label>
                <input type="tel" name="telefoonnummer" class="form-control" id="IdTelefoonnummer" placeholder="Voer telefoonnummer in" value="@telefoonnummer" @Validation.For("telefoonnummer")>
                <noscript>@Html.ValidationMessage("telefoonnummer")</noscript>
                </div>
                

                <div class="form-group">
                <label for="email">Email-adres</label>
                <input type="email" name="email" class="form-control" id="IdEmail" placeholder="Voer Email-adres in" value="@email" @Validation.For("email")>
                <noscript>@Html.ValidationMessage("email")</noscript>
                </div>

                <input name="__RequestVerificationToken" type="hidden" value=""/>  
                <button type="submit" name="action" value="changeUserData" class="btn btn-default">Gegevens Opslaan</button>
             </form>
        </div>
      </div>


<form method="post">
    @AntiForgery.GetHtml()
    @Html.ValidationSummary(excludeFieldErrors: true)

    <fieldset>
        <legend>
        @if (hasLocalAccount) {
            <text>Change Password Form</text>
        } else {
            <text>Set Password Form</text>
        }
        </legend>
        <ol>
            @if (hasLocalAccount) {
                <li class="current-password">
                    <label for="currentPassword" @if (!ModelState.IsValidField("currentPassword")) {<text>class="error-label"</text>}>Current password</label>
                    <input type="password" id="currentPassword" name="currentPassword" @Validation.For("currentPassword")/>
                    @Html.ValidationMessage("currentPassword")
                </li>
            }
            <li class="new-password">
                <label for="newPassword" @if (!ModelState.IsValidField("newPassword")) {<text>class="error-label"</text>}>New password</label>
                <input type="password" id="newPassword" name="newPassword" @Validation.For("newPassword")/>
                @Html.ValidationMessage("newPassword")
            </li>
            <li class="confirm-password">
                <label for="confirmPassword" @if (!ModelState.IsValidField("confirmPassword")) {<text>class="error-label"</text>}>Confirm new password</label>
                <input type="password" id="confirmPassword" name="confirmPassword" @Validation.For("confirmPassword")/>
                @Html.ValidationMessage("confirmPassword")
            </li>
        </ol>
        @if (hasLocalAccount) {
            <button type="submit" name="action" value="password">Change Password</button>
            <p>
                Click <a href="~/Account/ForgotPassword" title="Forgot password page">here</a> if you've forgotten your password.
            </p>
        } else {
            <button type="submit" name="action" value="password">Set Password</button>
        }
    </fieldset>
</form>

<section id="externalLogins">
    @if (externalLogins.Count > 0) {
        <h3>Registered external logins</h3>
        <table>
            <tbody>
            @foreach (var externalLogin in externalLogins) {
                <tr>
                    <td>@externalLogin.ProviderDisplayName</td>
                    <td>
                        @if (canRemoveLogin) {
                            <form method="post">
                                @AntiForgery.GetHtml()
                                <fieldset>
                                    <legend></legend>
                                    <input type="hidden" name="provider" value="@externalLogin.Provider" />
                                    <input type="hidden" name="userId" value="@externalLogin.UserId" />
                                    <button type="submit" name="action" value="removeLogin" title="Remove this @externalLogin.ProviderDisplayName credential from your account">Remove</button>
                                </fieldset>
                            </form>
                        } else {
                            @: &nbsp;
                        }
                    </td>
                </tr>
            }
            </tbody>
        </table>
    }

    <h3>Add an external login</h3>
    @RenderPage("~/Account/_ExternalLoginsList.cshtml")
</section>
