
@{
    Layout = "~/_LoginLayout.cshtml";
    Page.Title = "Wachtwoord vergeten";

    bool passwordSent = false;
    var resetToken = "";
    var email = Request.Form["email"] ?? Request.QueryString["email"];

    // Setup validation
    Validation.RequireField("email", "The email address field is required.");
    Validation.Add("email", 
       Validator.Required("Veld mag niet leeg zijn"),
       Validator.Regex(@"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$", "Invalid format for an email address"));

    if (IsPost) {
        AntiForgery.Validate();
        // validate email
        bool isValid = true;
        if (Validation.IsValid()) {
            if (WebSecurity.GetUserId(email) > -1 && WebSecurity.IsConfirmed(email)) {
                resetToken = WebSecurity.GeneratePasswordResetToken(email); // Optionally specify an expiration date for the token
            } else {
                passwordSent = true; // We don't want to disclose that the user does not exist.
                isValid = false;
            }
        }
        if (isValid) {
            var hostUrl = Request.Url.GetComponents(UriComponents.SchemeAndServer, UriFormat.Unescaped);
            var resetUrl = hostUrl + VirtualPathUtility.ToAbsolute("~/Account/PasswordReset?resetToken=" + HttpUtility.UrlEncode(resetToken));
            WebMail.Send(
                to: email,
                subject: "Aanvraag wachtwoord reset", 
                body: "Bezoek de volgende link om uw wachtwoord te resetten:<br /> <a href='" + HttpUtility.HtmlAttributeEncode(resetUrl) + @"'>" + resetUrl + "</a>"
            );
            passwordSent = true;
        }
    }
}
<section id="loginForm">
    <legend><h1>Studenten Overzicht</h1></legend>
      <div class="row">

            <div class="col-md-4 col-md-offset-4">
                <div class="login-panel panel panel-default">
                    <div class="panel-heading">
                        <h3 class="panel-title">Login</h3>
                    </div>
                    <div class="panel-body">
                        <form role="form" method="post">
                            @AntiForgery.GetHtml()
                            @* If one or more validation errors exist, show an error *@
                            @Html.ValidationSummary("Onsuccesvolle login pogin", excludeFieldErrors: true, htmlAttributes: null)
                            <fieldset>
                                @AntiForgery.GetHtml()
                                @Html.ValidationSummary(excludeFieldErrors: true)

                                <div class="form-group"> 
                                <label for="email" @if (!ModelState.IsValidField("email")) {<text>class="error-label"</text>}>Email address</label>
                                <input type="text" id="email" name="email" value="@email" disabled="@passwordSent" @Validation.For("email") />
                                @Html.ValidationMessage("email")
                                </div>
                                <input type="submit" class="btn btn-lg btn-success btn-block" value="Verstuur instructies" value="Send instructions" disabled="@passwordSent" />   
                                </div>
                                
                                <br>
                                    
                            </fieldset>
                        </form>
                    </div>
                </div>
            </div>
        </div>
</section>
