@{
    Layout = "~/_MainLayout.cshtml";
    Page.Title = "Enkele student toevoegen";
    var db = Database.Open("database");
    var id = "";

     //userdata variables
        var roepnaam = "";
        var naam = "";
        var groep = ""; 
        var mentor = "";
        var studentnummer = "";
        var voorvoegsels = "";
        var geslacht = "";
        var geboortedatum = "";
        var vooropleiding = "";
        var email = "";
        var emailinstelling  = "";
        var adrestype = "";
        var etiketnaam  = "";
        var etiketregel1 = "";
        var etiketregel2 = "";
        var telefoonnummer = "";
        var telefoonnummermobiel = "";
        var herinschrijving = "";
        var opleiding = "";
        var fase = "";
        var datumvan = "";
        var datumtot = "";
        var aankomst_bij_isatcode = "";
        var aanmeldingdatum = "";
        var datumdefinitief = "";

         //student validation
        Validation.Add("roepnaam", 
        Validator.Required("Je moet een voornaam invullen"), 
        Validator.StringLength(20, 2, "Niet meer dan 20 karakters"));

        Validation.Add("naam", 
        Validator.Required("Je moet een achternaam invullen"), 
        Validator.StringLength(20, 2, "Niet meer dan 20 karakters"));

        Validation.Add("groep", 
        Validator.Required("je moet een klas invullen"));

        Validation.Add("telefoonnummer", 
        Validator.Required("je moet een telefoonnummer invullen"), 
        Validator.StringLength(20, 0,"Niet meer dan 20 karakters")); 

        Validation.Add("email", 
        Validator.Required("Je moet een email-adres invullen"),
        Validator.Regex(@"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$", 
        "Invalid format for an email address"));
         
        Validation.Add("mentor", 
        Validator.Required("Je moet een mentor invullen"), 
        Validator.StringLength(20, 2, "Niet meer dan 20 karakters"));

        Validation.Add("studentnummer", 
        Validator.Required("Je moet een studentnummer invullen"), 
        Validator.StringLength(20, 2, "Niet meer dan 20 karakters"));

        Validation.Add("geslacht", 
        Validator.Required("Je moet een geslacht invullen")); 

        Validation.Add("geboortedatum", 
        Validator.Required("Je moet een geboortedatum invullen"), 
        Validator.StringLength(20, 2, "Niet meer dan 20 karakters"));

        Validation.Add("vooropleiding", 
        Validator.Required("Je moet een vooropleiding invullen")); 

        Validation.Add("emailinstelling", 
        Validator.Required("Je moet een email-adres invullen"),
        Validator.Regex(@"^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,4}$", 
        "Invalid format for an email address")); 

        Validation.Add("adrestype", 
        Validator.Required("Je moet een adrestype invullen"), 
        Validator.StringLength(20, 2, "Niet meer dan 20 karakters"));

        Validation.Add("etiketnaam", 
        Validator.Required("Je moet een etiketnaam invullen"), 
        Validator.StringLength(20, 2, "Niet meer dan 20 karakters"));

        Validation.Add("etiketregel1", 
        Validator.Required("Je moet een straatnaam en huisnummer invullen"), 
        Validator.StringLength(20, 2, "Niet meer dan 20 karakters"));

        Validation.Add("etiketregel2", 
        Validator.Required("Je moet een postcode en woonplaats invullen"), 
        Validator.StringLength(20, 2, "Niet meer dan 20 karakters")); 

        Validation.Add("telefoonnummermobiel", 
        Validator.Required("Je moet een mobiele telefoonnummer invullen"), 
        Validator.StringLength(20, 2, "Niet meer dan 20 karakters"));

        Validation.Add("herinschrijving", 
        Validator.Required("Bij herinschrijving voer in: 1"), 
        Validator.StringLength(20, 1, "Niet meer dan 20 karakters"));

        Validation.Add("opleiding", 
        Validator.Required("Je moet een opleiding invullen"), 
        Validator.StringLength(20, 2, "Niet meer dan 20 karakters"));

        Validation.Add("fase", 
        Validator.Required("Je moet een fase invullen"), 
        Validator.StringLength(50, 2, "Niet meer dan 50 karakters"));

        Validation.Add("aankomst_bij_isatcode", 
        Validator.Required("Je moet aankomst bij isatcode invullen"), 
        Validator.StringLength(20, 2, "Niet meer dan 20 karakters"));

        Validation.Add("aanmeldingdatum", 
        Validator.Required("Je moet een aanmeldingsdatum invullen"), 
        Validator.StringLength(20, 2, "Niet meer dan 20 karakters"));

        Validation.Add("datumdefinitief", 
        Validator.Required("Je moet een definitieve datum invullen"), 
        Validator.StringLength(20, 2, "Niet meer dan 20 karakters"));
        
        
   if (!Request.QueryString["student"].IsEmpty())
    {
    id = Request.QueryString["student"];
    db = Database.Open("database");
 
    var Query = "SELECT count(*) FROM students WHERE id = @0";
    userExist = db.QueryValue(Query,id);
    
     if (IsPost) 
     {  

        roepnaam                = Request.Form["roepnaam"];
        naam                    = Request.Form["naam"];
        groep                   = Request.Form["groep"]; 
        mentor                  = Request.Form["mentor"];
        studentnummer           = Request.Form["studentnummer"];
        voorvoegsels            = Request.Form["voorvoegsels"];
        geslacht                = Request.Form["geslacht"];
        geboortedatum           = Request.Form["geboortedatum"];
        vooropleiding           = Request.Form["vooropleiding"];
        email                   = Request.Form["email"];
        emailinstelling         = Request.Form["emailinstelling"];
        adrestype               = Request.Form["adrestype"];
        etiketnaam              = Request.Form["etiketnaam"];
        etiketregel1            = Request.Form["etiketregel1"];
        etiketregel2            = Request.Form["etiketregel2"];
        telefoonnummer          = Request.Form["telefoonnummer"];
        telefoonnummermobiel    = Request.Form["telefoonnummermobiel"];
        herinschrijving         = Request.Form["herinschrijving"];
        opleiding               = Request.Form["opleiding"];
        fase                    = Request.Form["fase"];
        datumvan                = Request.Form["datumvan"];
        datumtot                = Request.Form["datumtot"];
        aankomst_bij_isatcode   = Request.Form["aankomst_bij_isatcode"];
        aanmeldingdatum         = Request.Form["aanmeldingdatum"];
        datumdefinitief         = Request.Form["datumdefinitief"];
        }

         if (Validation.IsValid()) 
        {
            db = Database.Open("database");
          
            var updateCommand = "UPDATE students SET roepnaam=@0, naam=@1, groep=@2, mentor=@3, studentnummer=@4, voorvoegsels=@5, geslacht=@6, geboortedatum=@7, vooropleiding=@8, emailprive=@9, emailinstelling=@10, adrestype=@11, etiketnaam=@12, etiketregel1=@13, etiketregel2=@14, telefoonnummer=@15, telefoonnummermobiel=@16, herinschrijving=@17, opleiding=@18, fase=@19, datumvan=@20, datumtot=@21, aankomst_bij_isatcode=@22, aanmeldingdatum=@23, datumdefinitief=@24 WHERE Id = @25";
            db.Execute(updateCommand, roepnaam, naam, groep, mentor, studentnummer, voorvoegsels, geslacht, geboortedatum, vooropleiding, email, emailinstelling, adrestype, etiketnaam, etiketregel1, etiketregel2, telefoonnummer, telefoonnummermobiel, herinschrijving, opleiding, fase, datumvan, datumtot, aankomst_bij_isatcode, aanmeldingdatum, datumdefinitief, id);  
            Response.Redirect("~/admin/Students/ViewStudents");
        }

    else 
    {
    // User already exists
    ModelState.AddFormError("Email address is already in use.");
   }
  }
 }

